/*
 * Copyright (c) Huawei Technologies Co., Ltd. 2020-2020. All rights reserved.
 * Description:
 * Author: xuhan
 * Create: 2020-3-1
 */
#ifndef RENDER_COMMON_H
#define RENDER_COMMON_H

#include "Core/Types.h"

NS_CG_BEGIN

enum ProjectionType {
    PROJECTION_TYPE_ORTHOGONAL,
    PROJECTION_TYPE_PERSPECTIVE,
};

enum PrimitiveMode {
    PRIMITIVE_MODE_TRIANGLE_LIST,
    PRIMITIVE_MODE_LINE_LIST,
    PRIMITIVE_MODE_POINT_LIST,
};

enum FillMode {
    FILL_MODE_FILL,
    FILL_MODE_LINE,
    FILL_MODE_POINT,
};

enum CullMode {
    CULL_MODE_NONE,
    CULL_MODE_FRONT,
    CULL_MODE_BACK,
};

enum FrontFace {
    FRONT_FACE_COUNTER_CLOCKWISE,
    FRONT_FACE_CLOCKWISE,
};

enum CompareOperation {
    COMPARISON_OPERATION_NEVER,
    COMPARISON_OPERATION_LESS,
    COMPARISON_OPERATION_EQUAL,
    COMPARISON_OPERATION_LESS_OR_EQUAL,
    COMPARISON_OPERATION_GREATER,
    COMPARISON_OPERATION_NOT_EQUAL,
    COMPARISON_OPERATION_GREATER_OR_EQUAL,
    COMPARISON_OPERATION_ALWAYS,
};

enum BlendFactor {
    BLEND_ZERO,
    BLEND_ONE,
    BLEND_SRC_COLOR,
    BLEND_ONE_MINUS_SRC_COLOR,
    BLEND_DST_COLOR,
    BLEND_ONE_MINUS_DST_COLOR,
    BLEND_SRC_ALPHA,
    BLEND_ONE_MINUS_SRC_ALPHA,
    BLEND_DST_ALPHA,
    BLEND_ONE_MINUS_DST_ALPHA,
    BLEND_CONSTANT_COLOR,
    BLEND_ONE_MINUS_CONSTANT_COLOR,
    BLEND_CONSTANT_ALPHA,
    BLEND_ONE_MINUS_CONSTANT_ALPHA,
};

enum BlendOperation {
    BLEND_OPERATION_ADD,
    BLEND_OPERATION_SUBTRACT,
    BLEND_OPERATION_REV_SUBTRACT,
    BLEND_OPERATION_MIN,
    BLEND_OPERATION_MAX,
};

enum PixelFormat {
    // R
    PIXEL_FORMAT_R8_UNORM,
    PIXEL_FORMAT_R16_UINT,
    PIXEL_FORMAT_R16_FLOAT,
    PIXEL_FORMAT_R32_UINT,
    PIXEL_FORMAT_R32_FLOAT,
    PIXEL_FORMAT_D32_FLOAT,
    // RG
    PIXEL_FORMAT_R8G8_UNORM,
    PIXEL_FORMAT_R16G16_FLOAT,
    PIXEL_FORMAT_R32G32_FLOAT,
    // RGB
    PIXEL_FORMAT_R8G8B8_UNORM,
    PIXEL_FORMAT_R16G16B16_FLOAT,
    PIXEL_FORMAT_R32G32B32_FLOAT,
    // RGBA
    PIXEL_FORMAT_R8G8B8A8_UNORM,
    PIXEL_FORMAT_R16G16B16A16_FLOAT,
    PIXEL_FORMAT_R32G32B32A32_FLOAT,

    PIXEL_FORMAT_MAX
};

enum SamplerAddress {
    SAMPLER_ADDRESS_WRAP,
    SAMPLER_ADDRESS_MIRROR,
    SAMPLER_ADDRESS_CLAMP,
    SAMPLER_ADDRESS_BORDER,
    SAMPLER_ADDRESS_MIRROR_ONCE,
};

enum SamplerFilter {
    SAMPLER_FILTER_NEAREST,
    SAMPLER_FILTER_BILINEAR,
    SAMPLER_FILTER_TRILINEAR,
};

enum SamplerMipmapMode {
    SAMPLER_MIPMAP_NEAREST,
    SAMPLER_MIPMAP_BILINEAR,
};

enum ShaderStageType {
    SHADER_STAGE_TYPE_VERTEX = 1 << 0,
    SHADER_STAGE_TYPE_TESSELLATION_CONTROL = 1 << 1,
    SHADER_STAGE_TYPE_TESSELLATION_EVALUATION = 1 << 2,
    SHADER_STAGE_TYPE_GEOMETRY = 1 << 3,
    SHADER_STAGE_TYPE_FRAGMENT = 1 << 4,
    SHADER_STAGE_TYPE_COMPUTE = 1 << 5,
    SHADER_STAGE_ALL = 0x7FFFFFFF,
};

enum LightType {
    LIGHT_TYPE_DIRECTIONAL,
    LIGHT_TYPE_POINT,

    LIGHT_TYPE_MAX,
};

enum TextureType {
    TEXTURE_TYPE_ALBEDO,
    TEXTURE_TYPE_PBRTEXTURE, //ao, metal, roughness
    TEXTURE_TYPE_NORMAL,
    TEXTURE_TYPE_ENVIRONMENTMAP,
    TEXTURE_TYPE_EMISSION,

    TEXTURE_TYPE_MAX,
};

NS_CG_END

#endif