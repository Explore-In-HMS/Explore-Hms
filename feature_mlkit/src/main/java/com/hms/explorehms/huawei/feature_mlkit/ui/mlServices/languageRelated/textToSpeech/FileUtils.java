/*
 *
 *   Copyright 2020. Explore in HMS. All rights reserved.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   You may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 */
package com.hms.explorehms.huawei.feature_mlkit.ui.mlServices.languageRelated.textToSpeech;

import android.content.Context;
import android.util.Log;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.RandomAccessFile;

public class FileUtils {

    private static final String TAG = FileUtils.class.getSimpleName();

    private FileUtils() {
        throw new IllegalStateException("Utility class");
    }

    /**
     * Create a directory to store the voice files generated by the TTS.
     * Create ttx.wav and tts.pcm files if there is not exists
     *
     * @param context
     */
    public static String initFile(Context context) {
        String filePath = context.getExternalFilesDir("wav").getPath();
        File file = new File(filePath);
        if (!file.exists()) {
            try {
                boolean isFileCreated = file.createNewFile();
                Log.i(TAG,String.valueOf(isFileCreated));
            } catch (IOException e) {
                Log.e(TAG, "initFile createNewFile : " + e.getMessage(), e);
            }
            Log.i(TAG, "initFile Create a directory to store the voice files generated by the TTS. filePath : " + filePath);
        }
        try {
            File fileAudioWav = new File(file, "tts.wav");
            if (!fileAudioWav.exists()) {
                boolean isFileCreated = fileAudioWav.createNewFile();
                Log.i(TAG,String.valueOf(isFileCreated));
            }
            File fileAudioPcm = new File(file, "tts.pcm");
            if (!fileAudioPcm.exists()) {
                boolean isFileCreated = fileAudioPcm.createNewFile();
                Log.i(TAG,String.valueOf(isFileCreated));
            }
        } catch (IOException e) {
            Log.e(TAG, "initFile create new tts.wav and tts.pcm files exception : " + e.getMessage(), e);
        }
        return filePath;
    }

    /**
     * Delete file.
     *
     * @param filePath
     * @return
     */
    public static boolean deleteFile(String filePath) {
        File file = new File(filePath);
        boolean result = (file.isFile() && file.exists()) && file.delete();
        Log.i(TAG, "deleteFile : " + filePath + " : result : " + result);
        return result;
    }

    /**
     * Writes data stream to the file.
     *
     * @param buffer
     * @param strFilePath
     * @param append
     */
    public static void writeBufferToFile(byte[] buffer, String strFilePath, boolean append) {
        File file = new File(strFilePath);
        RandomAccessFile randomAccessFile = null;
        FileOutputStream fileOutputStream = null;
        try {
            if (append) {
                // Appending write mode.
                randomAccessFile = new RandomAccessFile(file, "rw");
                randomAccessFile.seek(file.length());
                randomAccessFile.write(buffer);
            } else {
                // Overwrite mode.
                fileOutputStream = new FileOutputStream(file);
                fileOutputStream.write(buffer);
                fileOutputStream.flush();
            }
        } catch (IOException e) {
            Log.e(TAG, "writeBufferToFile IOException : " + e.getMessage(), e);
        } finally {
            try {
                if (randomAccessFile != null) {
                    randomAccessFile.close();
                }
                if (fileOutputStream != null) {
                    fileOutputStream.close();
                }
            } catch (IOException e) {
                Log.e(TAG, "writeBufferToFile Failed to close stream. : " + e.getMessage(), e);
            }
        }
    }

}
